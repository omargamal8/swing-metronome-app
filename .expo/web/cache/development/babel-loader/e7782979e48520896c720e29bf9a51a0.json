{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/omar/swing-metronome-app/metronome.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BpmPicker from \"./bpm-picker\";\nimport { SinglePulseMaker } from \"./single-pulse-maker\";\nimport { BeatTracker, SixteenthNote, EighthNote, QuarterNote } from \"./beat-tracker\";\nimport { Audio } from 'expo-av';\n\nvar MetronomeApp = function (_Component) {\n  _inherits(MetronomeApp, _Component);\n\n  var _super = _createSuper(MetronomeApp);\n\n  function MetronomeApp(props) {\n    var _this;\n\n    _classCallCheck(this, MetronomeApp);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      bpm: 60,\n      active_subd: new SixteenthNote(4, 4),\n      sound: undefined,\n      dummy: false\n    };\n    _this.tick = _this.tick.bind(_assertThisInitialized(_this));\n    _this.setBPM = _this.setBPM.bind(_assertThisInitialized(_this));\n    _this.stopPressed = _this.stopPressed.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MetronomeApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(\"Initializing sound\");\n      Audio.Sound.createAsync(require(\"./assets/MetronomeUp.wav\")).then(function (sound) {\n        console.log(\"ACQUIRED Asset\", sound);\n\n        _this2.setState({\n          sound: sound\n        });\n      });\n      console.log(\"DONE WITH THE SOUND BS\");\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"CLEARING OUT SOUND OBJ\");\n      if (this.state.sound !== undefined) this.state.sound.sound.unloadAsync();\n    }\n  }, {\n    key: \"setBPM\",\n    value: function setBPM(value) {\n      this.setState({\n        bpm: value\n      });\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.state.sound.sound.playAsync().then(function () {}).catch(function (err) {\n        console.log(\"errrorr===========\");\n      });\n      this.state.active_subd.incrementTickCounter();\n      return 60 * this.state.active_subd.getNextTickInterval() / this.state.bpm * 1000;\n    }\n  }, {\n    key: \"stopPressed\",\n    value: function stopPressed() {\n      this.state.active_subd.clearCounters();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"ReRender\");\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, console.log(\"GLOBAL BPM\", this.state.bpm), React.createElement(SinglePulseMaker, {\n        pulse_time_left: 0,\n        playing: false,\n        onPulseCallback: this.tick,\n        stopCleanUp: this.stopPressed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return MetronomeApp;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default MetronomeApp;","map":{"version":3,"sources":["/home/omar/swing-metronome-app/metronome.js"],"names":["StatusBar","React","Component","BpmPicker","SinglePulseMaker","BeatTracker","SixteenthNote","EighthNote","QuarterNote","Audio","MetronomeApp","props","state","bpm","active_subd","sound","undefined","dummy","tick","bind","setBPM","stopPressed","console","log","Sound","createAsync","require","then","setState","unloadAsync","value","playAsync","catch","err","incrementTickCounter","getNextTickInterval","clearCounters","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;AAEA,OAAOC,SAAP;AACA,SAAQC,gBAAR;AACA,SAAQC,WAAR,EAAqBC,aAArB,EAAoCC,UAApC,EAAgDC,WAAhD;AACA,SAAQC,KAAR,QAAoB,SAApB;;IACMC,Y;;;;;AACF,wBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAC,EADK;AAETC,MAAAA,WAAW,EAAE,IAAIR,aAAJ,CAAkB,CAAlB,EAAoB,CAApB,CAFJ;AAGTS,MAAAA,KAAK,EAAEC,SAHE;AAITC,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMA,UAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,+BAAZ;AACA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYD,IAAZ,+BAAd;AACA,UAAKE,WAAL,GAAmB,MAAKA,WAAL,CAAiBF,IAAjB,+BAAnB;AAVc;AAWjB;;;;wCAEkB;AAAA;;AACbG,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAd,MAAAA,KAAK,CAACe,KAAN,CAAYC,WAAZ,CACEC,OAAO,4BADT,EAEEC,IAFF,CAEO,UAACZ,KAAD,EAAS;AACdO,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,KAA9B;;AACA,QAAA,MAAI,CAACa,QAAL,CAAc;AAACb,UAAAA,KAAK,EAACA;AAAP,SAAd;AACD,OALD;AAMAO,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAEL;;;2CAEqB;AAClBD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,UAAG,KAAKX,KAAL,CAAWG,KAAX,KAAqBC,SAAxB,EACE,KAAKJ,KAAL,CAAWG,KAAX,CAAiBA,KAAjB,CAAuBc,WAAvB;AACL;;;2BAEMC,K,EAAM;AACT,WAAKF,QAAL,CAAc;AAACf,QAAAA,GAAG,EAACiB;AAAL,OAAd;AACH;;;2BAMK;AAIF,WAAKlB,KAAL,CAAWG,KAAX,CAAiBA,KAAjB,CAAuBgB,SAAvB,GAAmCJ,IAAnC,CAAwC,YAAI,CAAE,CAA9C,EAAgDK,KAAhD,CAAsD,UAAAC,GAAG,EAAE;AAACX,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAAkC,OAA9F;AAEA,WAAKX,KAAL,CAAWE,WAAX,CAAuBoB,oBAAvB;AAGA,aAAQ,KAAK,KAAKtB,KAAL,CAAWE,WAAX,CAAuBqB,mBAAvB,EAAL,GAAoD,KAAKvB,KAAL,CAAWC,GAAhE,GAAuE,IAA9E;AACH;;;kCAUY;AACX,WAAKD,KAAL,CAAWE,WAAX,CAAuBsB,aAAvB;AACD;;;6BAEO;AACJd,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEc,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKhB,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKX,KAAL,CAAWC,GAArC,CADL,EAEA,oBAAC,gBAAD;AAAkB,QAAA,eAAe,EAAE,CAAnC;AAAsC,QAAA,OAAO,EAAE,KAA/C;AAAsD,QAAA,eAAe,EAAE,KAAKK,IAA5E;AAAkF,QAAA,WAAW,EAAE,KAAKG,WAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CADJ;AAcH;;;;EAhFsBnB,S;;AAmF3B,IAAMmC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;AASA,eAAelC,YAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {Component} from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BpmPicker from './bpm-picker'\nimport {SinglePulseMaker} from './single-pulse-maker'\nimport {BeatTracker, SixteenthNote, EighthNote, QuarterNote} from './beat-tracker'\nimport {Audio} from 'expo-av'\nclass MetronomeApp extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            bpm:60,\n            active_subd: new SixteenthNote(4,4),\n            sound: undefined,\n            dummy: false,\n        }\n        this.tick = this.tick.bind(this)\n        this.setBPM = this.setBPM.bind(this)\n        this.stopPressed = this.stopPressed.bind(this)\n    }\n\n    componentDidMount(){\n          console.log(\"Initializing sound\")\n          Audio.Sound.createAsync(\n            require('./assets/MetronomeUp.wav')\n          ).then((sound)=>{\n            console.log(\"ACQUIRED Asset\", sound)\n            this.setState({sound:sound})\n          });              \n          console.log(\"DONE WITH THE SOUND BS\")\n          //   const a = \n    }\n\n    componentWillUnmount(){\n        console.log(\"CLEARING OUT SOUND OBJ\")\n        if(this.state.sound !== undefined)\n          this.state.sound.sound.unloadAsync()        \n    }\n  \n    setBPM(value){\n        this.setState({bpm:value})\n    }\n\n  // React.useEffect(()=>{\n  //   console.log(\"BPM CHANGED\", bpm)\n  // }, [bpm])\n\n    tick(){\n        // console.log(\"TICK\", this.state.sound, this.state.bpm)\n        // console.log(\"tick\")\n        // console.log(\"SIXTEen getting next interaal\", active_subd.getNextTickInterval())\n        this.state.sound.sound.playAsync().then(()=>{}).catch(err=>{console.log(\"errrorr===========\")})\n\n        this.state.active_subd.incrementTickCounter()\n        // console.log(\"NEXT\", this.state.bpm * (this.state.active_subd.getNextTickInterval() / 60) * 1000)\n        // console.log(\"NEXT INTERVAL FRACTION\", this.state.active_subd.getNextTickInterval())\n        return (60 * this.state.active_subd.getNextTickInterval() / this.state.bpm) * 1000\n    }\n\n  // React.useEffect((new_subd)=>{\n  //   console.log(\"SUBD Changed\")\n  //   setSubd(new_subd)\n  // }, [active_subd])\n  \n  // React.useEffect(()=>{\n\n  // }, [])\n    stopPressed(){\n      this.state.active_subd.clearCounters()\n    }\n\n    render(){\n        console.log(\"ReRender\")\n        return (\n            <View style={styles.container}>\n                {console.log(\"GLOBAL BPM\", this.state.bpm)}\n            <SinglePulseMaker pulse_time_left={0} playing={false} onPulseCallback={this.tick} stopCleanUp={this.stopPressed}></SinglePulseMaker>\n\n            {/* <StatusBar style=\"auto\" /> */}\n            {/* <BpmPicker bpm={this.state.bpm} setBPM={this.setBPM} ></BpmPicker> */}\n            {/* <button onClick={()=>{ */}\n                {/* setSubd(new EighthNote(4, 4)) */}\n            {/* }}>change sbd</button> */}\n\n            {/* <button onClick={()=>this.setState({dummy:!this.state.dummy})}>refresh state</button> */}\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default MetronomeApp;"]},"metadata":{},"sourceType":"module"}